---
export interface Props {
  currentPage: number;
  totalItems: number;
  itemsPerPage: number;
  basePath: string;
}

const { currentPage, totalItems, itemsPerPage, basePath } = Astro.props;

const totalPages = Math.ceil(totalItems / itemsPerPage);

// Pagination window logic
const visibleRange = 5;
const halfRange = Math.floor(visibleRange / 2);

let startPage = Math.max(1, currentPage - halfRange);
let endPage = Math.min(totalPages, startPage + visibleRange - 1);

if (endPage - startPage + 1 < visibleRange) {
  startPage = Math.max(1, endPage - visibleRange + 1);
}

const pagesToShow = Array.from(
  { length: endPage - startPage + 1 },
  (_, i) => startPage + i
);
---

<nav aria-label="Pagination" class="flex justify-center mt-10">
  <ul class="flex items-center space-x-2 text-sm">
    <!-- Prev -->
    {
      currentPage > 1 && (
        <li>
          <a
            href={`${basePath}/${currentPage - 1}`}
            class="px-3 py-1 border rounded hover:bg-gray-100"
          >
            Prev
          </a>
        </li>
      )
    }

    <!-- First page -->
    {
      startPage > 1 && (
        <li>
          <a
            href={`${basePath}/1`}
            class="px-3 py-1 border rounded hover:bg-gray-100"
          >
            1
          </a>
        </li>
      )
    }

    <!-- Left ellipsis (only if gap between 1 and startPage > 1) -->
    {
      startPage > 2 && (
        <li>
          <span class="px-2">…</span>
        </li>
      )
    }

    <!-- Page numbers -->
    {
      pagesToShow.map((page) => (
        <li>
          <a
            href={`${basePath}/${page}`}
            aria-current={page === currentPage ? "page" : undefined}
            class={`px-3 py-1 border rounded ${
              page === currentPage
                ? "bg-orange-500 text-white border-orange-600"
                : "hover:bg-gray-100"
            }`}
          >
            {page}
          </a>
        </li>
      ))
    }

    <!-- Right ellipsis (only if gap between endPage and totalPages > 1) -->
    {
      endPage < totalPages - 1 && (
        <li>
          <span class="px-2">…</span>
        </li>
      )
    }

    <!-- Last page -->
    {
      endPage < totalPages && (
        <li>
          <a
            href={`${basePath}/${totalPages}`}
            class="px-3 py-1 border rounded hover:bg-gray-100"
          >
            {totalPages}
          </a>
        </li>
      )
    }

    <!-- Next -->
    {
      currentPage < totalPages && (
        <li>
          <a
            href={`${basePath}/${currentPage + 1}`}
            class="px-3 py-1 border rounded hover:bg-gray-100"
          >
            Next
          </a>
        </li>
      )
    }
  </ul>
</nav>

<!-- how to use   
 
---
import UniversalCard from '../../../../../components/dynamic/universal_card.astro';
import blogData from '../../../../../../public/JSON/chatbot-blog-posts.json'; // Adjust as per pages
import Pagination from '../../../../../components/dynamic/pagination.astro';
import BlogGrid from '../../../../../components/blog/blog-grid.astro';

const currentPage = parseInt(Astro.params.page) || 1;
const itemsPerPage = 12;
const totalItems = blogData.length;
const basePath = "/products/blog/page";

const paginatedPosts = blogData.slice(
  (currentPage - 1) * itemsPerPage,
  currentPage * itemsPerPage
);
---

<BlogGrid>
  {paginatedPosts.map(post => (
    <UniversalCard blog_data={post} />
  ))}
</BlogGrid>

<Pagination 
  currentPage={currentPage}
  totalItems={totalItems}
  itemsPerPage={itemsPerPage}
  basePath={basePath}
/>







-->
